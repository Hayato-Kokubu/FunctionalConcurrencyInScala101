Monixについて // Future との違いを主に

Scala11,12, で使用可能 // Scala13 では使えない
業務で使うMonix のversion は"3.0.0-RC1"

subproectだけ使う  でもできる


並列処理をする際にはScheduler が必要
Scheduler が、ExecutionContext の代わりになる？
// Scheduler とはなにもの？

Task: Lazy Future
// Future はeagerである 即時実行してしまう


非同期処理を便利にするMonix
https://qiita.com/ichizin/items/bc17e5a127a01189966c

・Future: 実行中か成功か失敗かわからない値
・Task  : 実行中か成功か失敗かわからない関数 << 実行をこちらがしていしないと計算されない


Scheduler には、Akka Scheduler もある
// Akka に依存しているため、とてもheavy


・開始をプログラマ側で指定できる
・scheduler がいい


とても基本的な話
  Future が即時実行であることを示すコードを作れ


どうやってTaskの計算を実行指示するか？
=> scheduler で、実行を制御できる

Observable というのが出てきた
  これはmonad っぽい
Obeservableは宣言だけして、
実行するにはsubscribe を呼べばいい
  Cancelable になる。
  実際、cancelメソッドで中止できる。
  => Futureではそんなことあったっけ？

dumpの使い方がいまいちわからん。。。

・Typelevel Cats Integration

ver 3.x から、Cats に依存しており、便利

例) Task はMonad である。
    => で、出た〜 Monad!
  他にも、Applicativeとかcats.effect.Sync(何者？)とかをまかなっている。

Companion object に元のクラスをextends して云々。。。というのをやった覚えがある。

Tutorials

・バッチ処理によって、順番をきめられる並列しょりができる

- The Naive Way
  Task.gather

 Task.apply,
 Task.fork task をforkすることができる？
